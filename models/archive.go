// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Archive is an object representing the database table.
type Archive struct {
	ID           int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Path         string      `boil:"path" json:"path" toml:"path" yaml:"path"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PublishedAt  null.Time   `boil:"published_at" json:"published_at,omitempty" toml:"published_at" yaml:"published_at,omitempty"`
	Title        string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Slug         string      `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Pages        int16       `boil:"pages" json:"pages" toml:"pages" yaml:"pages"`
	Size         int64       `boil:"size" json:"size" toml:"size" yaml:"size"`
	Expunged     bool        `boil:"expunged" json:"expunged" toml:"expunged" yaml:"expunged"`
	Source       null.String `boil:"source" json:"source,omitempty" toml:"source" yaml:"source,omitempty"`
	SubmissionID null.Int64  `boil:"submission_id" json:"submission_id,omitempty" toml:"submission_id" yaml:"submission_id,omitempty"`
	RedirectID   null.Int64  `boil:"redirect_id" json:"redirect_id,omitempty" toml:"redirect_id" yaml:"redirect_id,omitempty"`

	R *archiveR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L archiveL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArchiveColumns = struct {
	ID           string
	Path         string
	CreatedAt    string
	UpdatedAt    string
	PublishedAt  string
	Title        string
	Slug         string
	Pages        string
	Size         string
	Expunged     string
	Source       string
	SubmissionID string
	RedirectID   string
}{
	ID:           "id",
	Path:         "path",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	PublishedAt:  "published_at",
	Title:        "title",
	Slug:         "slug",
	Pages:        "pages",
	Size:         "size",
	Expunged:     "expunged",
	Source:       "source",
	SubmissionID: "submission_id",
	RedirectID:   "redirect_id",
}

var ArchiveTableColumns = struct {
	ID           string
	Path         string
	CreatedAt    string
	UpdatedAt    string
	PublishedAt  string
	Title        string
	Slug         string
	Pages        string
	Size         string
	Expunged     string
	Source       string
	SubmissionID string
	RedirectID   string
}{
	ID:           "archive.id",
	Path:         "archive.path",
	CreatedAt:    "archive.created_at",
	UpdatedAt:    "archive.updated_at",
	PublishedAt:  "archive.published_at",
	Title:        "archive.title",
	Slug:         "archive.slug",
	Pages:        "archive.pages",
	Size:         "archive.size",
	Expunged:     "archive.expunged",
	Source:       "archive.source",
	SubmissionID: "archive.submission_id",
	RedirectID:   "archive.redirect_id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ArchiveWhere = struct {
	ID           whereHelperint64
	Path         whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	PublishedAt  whereHelpernull_Time
	Title        whereHelperstring
	Slug         whereHelperstring
	Pages        whereHelperint16
	Size         whereHelperint64
	Expunged     whereHelperbool
	Source       whereHelpernull_String
	SubmissionID whereHelpernull_Int64
	RedirectID   whereHelpernull_Int64
}{
	ID:           whereHelperint64{field: "\"archive\".\"id\""},
	Path:         whereHelperstring{field: "\"archive\".\"path\""},
	CreatedAt:    whereHelpertime_Time{field: "\"archive\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"archive\".\"updated_at\""},
	PublishedAt:  whereHelpernull_Time{field: "\"archive\".\"published_at\""},
	Title:        whereHelperstring{field: "\"archive\".\"title\""},
	Slug:         whereHelperstring{field: "\"archive\".\"slug\""},
	Pages:        whereHelperint16{field: "\"archive\".\"pages\""},
	Size:         whereHelperint64{field: "\"archive\".\"size\""},
	Expunged:     whereHelperbool{field: "\"archive\".\"expunged\""},
	Source:       whereHelpernull_String{field: "\"archive\".\"source\""},
	SubmissionID: whereHelpernull_Int64{field: "\"archive\".\"submission_id\""},
	RedirectID:   whereHelpernull_Int64{field: "\"archive\".\"redirect_id\""},
}

// ArchiveRels is where relationship names are stored.
var ArchiveRels = struct {
	Redirect         string
	Submission       string
	RedirectArchives string
	Artists          string
	Circles          string
	Magazines        string
	Parodies         string
	Tags             string
	Users            string
}{
	Redirect:         "Redirect",
	Submission:       "Submission",
	RedirectArchives: "RedirectArchives",
	Artists:          "Artists",
	Circles:          "Circles",
	Magazines:        "Magazines",
	Parodies:         "Parodies",
	Tags:             "Tags",
	Users:            "Users",
}

// archiveR is where relationships are stored.
type archiveR struct {
	Redirect         *Archive      `boil:"Redirect" json:"Redirect" toml:"Redirect" yaml:"Redirect"`
	Submission       *Submission   `boil:"Submission" json:"Submission" toml:"Submission" yaml:"Submission"`
	RedirectArchives ArchiveSlice  `boil:"RedirectArchives" json:"RedirectArchives" toml:"RedirectArchives" yaml:"RedirectArchives"`
	Artists          ArtistSlice   `boil:"Artists" json:"Artists" toml:"Artists" yaml:"Artists"`
	Circles          CircleSlice   `boil:"Circles" json:"Circles" toml:"Circles" yaml:"Circles"`
	Magazines        MagazineSlice `boil:"Magazines" json:"Magazines" toml:"Magazines" yaml:"Magazines"`
	Parodies         ParodySlice   `boil:"Parodies" json:"Parodies" toml:"Parodies" yaml:"Parodies"`
	Tags             TagSlice      `boil:"Tags" json:"Tags" toml:"Tags" yaml:"Tags"`
	Users            UserSlice     `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*archiveR) NewStruct() *archiveR {
	return &archiveR{}
}

func (r *archiveR) GetRedirect() *Archive {
	if r == nil {
		return nil
	}
	return r.Redirect
}

func (r *archiveR) GetSubmission() *Submission {
	if r == nil {
		return nil
	}
	return r.Submission
}

func (r *archiveR) GetRedirectArchives() ArchiveSlice {
	if r == nil {
		return nil
	}
	return r.RedirectArchives
}

func (r *archiveR) GetArtists() ArtistSlice {
	if r == nil {
		return nil
	}
	return r.Artists
}

func (r *archiveR) GetCircles() CircleSlice {
	if r == nil {
		return nil
	}
	return r.Circles
}

func (r *archiveR) GetMagazines() MagazineSlice {
	if r == nil {
		return nil
	}
	return r.Magazines
}

func (r *archiveR) GetParodies() ParodySlice {
	if r == nil {
		return nil
	}
	return r.Parodies
}

func (r *archiveR) GetTags() TagSlice {
	if r == nil {
		return nil
	}
	return r.Tags
}

func (r *archiveR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// archiveL is where Load methods for each relationship are stored.
type archiveL struct{}

var (
	archiveAllColumns            = []string{"id", "path", "created_at", "updated_at", "published_at", "title", "slug", "pages", "size", "expunged", "source", "submission_id", "redirect_id"}
	archiveColumnsWithoutDefault = []string{"path", "pages", "size"}
	archiveColumnsWithDefault    = []string{"id", "created_at", "updated_at", "published_at", "title", "slug", "expunged", "source", "submission_id", "redirect_id"}
	archivePrimaryKeyColumns     = []string{"id"}
	archiveGeneratedColumns      = []string{}
)

type (
	// ArchiveSlice is an alias for a slice of pointers to Archive.
	// This should almost always be used instead of []Archive.
	ArchiveSlice []*Archive
	// ArchiveHook is the signature for custom Archive hook methods
	ArchiveHook func(boil.Executor, *Archive) error

	archiveQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	archiveType                 = reflect.TypeOf(&Archive{})
	archiveMapping              = queries.MakeStructMapping(archiveType)
	archivePrimaryKeyMapping, _ = queries.BindMapping(archiveType, archiveMapping, archivePrimaryKeyColumns)
	archiveInsertCacheMut       sync.RWMutex
	archiveInsertCache          = make(map[string]insertCache)
	archiveUpdateCacheMut       sync.RWMutex
	archiveUpdateCache          = make(map[string]updateCache)
	archiveUpsertCacheMut       sync.RWMutex
	archiveUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var archiveAfterSelectHooks []ArchiveHook

var archiveBeforeInsertHooks []ArchiveHook
var archiveAfterInsertHooks []ArchiveHook

var archiveBeforeUpdateHooks []ArchiveHook
var archiveAfterUpdateHooks []ArchiveHook

var archiveBeforeDeleteHooks []ArchiveHook
var archiveAfterDeleteHooks []ArchiveHook

var archiveBeforeUpsertHooks []ArchiveHook
var archiveAfterUpsertHooks []ArchiveHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Archive) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range archiveAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Archive) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range archiveBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Archive) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range archiveAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Archive) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range archiveBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Archive) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range archiveAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Archive) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range archiveBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Archive) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range archiveAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Archive) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range archiveBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Archive) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range archiveAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddArchiveHook registers your hook function for all future operations.
func AddArchiveHook(hookPoint boil.HookPoint, archiveHook ArchiveHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		archiveAfterSelectHooks = append(archiveAfterSelectHooks, archiveHook)
	case boil.BeforeInsertHook:
		archiveBeforeInsertHooks = append(archiveBeforeInsertHooks, archiveHook)
	case boil.AfterInsertHook:
		archiveAfterInsertHooks = append(archiveAfterInsertHooks, archiveHook)
	case boil.BeforeUpdateHook:
		archiveBeforeUpdateHooks = append(archiveBeforeUpdateHooks, archiveHook)
	case boil.AfterUpdateHook:
		archiveAfterUpdateHooks = append(archiveAfterUpdateHooks, archiveHook)
	case boil.BeforeDeleteHook:
		archiveBeforeDeleteHooks = append(archiveBeforeDeleteHooks, archiveHook)
	case boil.AfterDeleteHook:
		archiveAfterDeleteHooks = append(archiveAfterDeleteHooks, archiveHook)
	case boil.BeforeUpsertHook:
		archiveBeforeUpsertHooks = append(archiveBeforeUpsertHooks, archiveHook)
	case boil.AfterUpsertHook:
		archiveAfterUpsertHooks = append(archiveAfterUpsertHooks, archiveHook)
	}
}

// OneG returns a single archive record from the query using the global executor.
func (q archiveQuery) OneG() (*Archive, error) {
	return q.One(boil.GetDB())
}

// One returns a single archive record from the query.
func (q archiveQuery) One(exec boil.Executor) (*Archive, error) {
	o := &Archive{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for archive")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Archive records from the query using the global executor.
func (q archiveQuery) AllG() (ArchiveSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Archive records from the query.
func (q archiveQuery) All(exec boil.Executor) (ArchiveSlice, error) {
	var o []*Archive

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Archive slice")
	}

	if len(archiveAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Archive records in the query using the global executor
func (q archiveQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Archive records in the query.
func (q archiveQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count archive rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q archiveQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q archiveQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if archive exists")
	}

	return count > 0, nil
}

// Redirect pointed to by the foreign key.
func (o *Archive) Redirect(mods ...qm.QueryMod) archiveQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RedirectID),
	}

	queryMods = append(queryMods, mods...)

	return Archives(queryMods...)
}

// Submission pointed to by the foreign key.
func (o *Archive) Submission(mods ...qm.QueryMod) submissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubmissionID),
	}

	queryMods = append(queryMods, mods...)

	return Submissions(queryMods...)
}

// RedirectArchives retrieves all the archive's Archives with an executor via redirect_id column.
func (o *Archive) RedirectArchives(mods ...qm.QueryMod) archiveQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"archive\".\"redirect_id\"=?", o.ID),
	)

	return Archives(queryMods...)
}

// Artists retrieves all the artist's Artists with an executor.
func (o *Archive) Artists(mods ...qm.QueryMod) artistQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"archive_artists\" on \"artist\".\"id\" = \"archive_artists\".\"artist_id\""),
		qm.Where("\"archive_artists\".\"archive_id\"=?", o.ID),
	)

	return Artists(queryMods...)
}

// Circles retrieves all the circle's Circles with an executor.
func (o *Archive) Circles(mods ...qm.QueryMod) circleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"archive_circles\" on \"circle\".\"id\" = \"archive_circles\".\"circle_id\""),
		qm.Where("\"archive_circles\".\"archive_id\"=?", o.ID),
	)

	return Circles(queryMods...)
}

// Magazines retrieves all the magazine's Magazines with an executor.
func (o *Archive) Magazines(mods ...qm.QueryMod) magazineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"archive_magazines\" on \"magazine\".\"id\" = \"archive_magazines\".\"magazine_id\""),
		qm.Where("\"archive_magazines\".\"archive_id\"=?", o.ID),
	)

	return Magazines(queryMods...)
}

// Parodies retrieves all the parody's Parodies with an executor.
func (o *Archive) Parodies(mods ...qm.QueryMod) parodyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"archive_parodies\" on \"parody\".\"id\" = \"archive_parodies\".\"parody_id\""),
		qm.Where("\"archive_parodies\".\"archive_id\"=?", o.ID),
	)

	return Parodies(queryMods...)
}

// Tags retrieves all the tag's Tags with an executor.
func (o *Archive) Tags(mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"archive_tags\" on \"tag\".\"id\" = \"archive_tags\".\"tag_id\""),
		qm.Where("\"archive_tags\".\"archive_id\"=?", o.ID),
	)

	return Tags(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *Archive) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"user_favorites\" on \"users\".\"id\" = \"user_favorites\".\"user_id\""),
		qm.Where("\"user_favorites\".\"archive_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadRedirect allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (archiveL) LoadRedirect(e boil.Executor, singular bool, maybeArchive interface{}, mods queries.Applicator) error {
	var slice []*Archive
	var object *Archive

	if singular {
		object = maybeArchive.(*Archive)
	} else {
		slice = *maybeArchive.(*[]*Archive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveR{}
		}
		if !queries.IsNil(object.RedirectID) {
			args = append(args, object.RedirectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RedirectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RedirectID) {
				args = append(args, obj.RedirectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`archive`),
		qm.WhereIn(`archive.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Archive")
	}

	var resultSlice []*Archive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Archive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for archive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for archive")
	}

	if len(archiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Redirect = foreign
		if foreign.R == nil {
			foreign.R = &archiveR{}
		}
		foreign.R.RedirectArchives = append(foreign.R.RedirectArchives, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RedirectID, foreign.ID) {
				local.R.Redirect = foreign
				if foreign.R == nil {
					foreign.R = &archiveR{}
				}
				foreign.R.RedirectArchives = append(foreign.R.RedirectArchives, local)
				break
			}
		}
	}

	return nil
}

// LoadSubmission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (archiveL) LoadSubmission(e boil.Executor, singular bool, maybeArchive interface{}, mods queries.Applicator) error {
	var slice []*Archive
	var object *Archive

	if singular {
		object = maybeArchive.(*Archive)
	} else {
		slice = *maybeArchive.(*[]*Archive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveR{}
		}
		if !queries.IsNil(object.SubmissionID) {
			args = append(args, object.SubmissionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SubmissionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SubmissionID) {
				args = append(args, obj.SubmissionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`submission`),
		qm.WhereIn(`submission.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Submission")
	}

	var resultSlice []*Submission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Submission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for submission")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for submission")
	}

	if len(archiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Submission = foreign
		if foreign.R == nil {
			foreign.R = &submissionR{}
		}
		foreign.R.Archives = append(foreign.R.Archives, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubmissionID, foreign.ID) {
				local.R.Submission = foreign
				if foreign.R == nil {
					foreign.R = &submissionR{}
				}
				foreign.R.Archives = append(foreign.R.Archives, local)
				break
			}
		}
	}

	return nil
}

// LoadRedirectArchives allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (archiveL) LoadRedirectArchives(e boil.Executor, singular bool, maybeArchive interface{}, mods queries.Applicator) error {
	var slice []*Archive
	var object *Archive

	if singular {
		object = maybeArchive.(*Archive)
	} else {
		slice = *maybeArchive.(*[]*Archive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`archive`),
		qm.WhereIn(`archive.redirect_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load archive")
	}

	var resultSlice []*Archive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice archive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on archive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for archive")
	}

	if len(archiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RedirectArchives = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &archiveR{}
			}
			foreign.R.Redirect = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RedirectID) {
				local.R.RedirectArchives = append(local.R.RedirectArchives, foreign)
				if foreign.R == nil {
					foreign.R = &archiveR{}
				}
				foreign.R.Redirect = local
				break
			}
		}
	}

	return nil
}

// LoadArtists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (archiveL) LoadArtists(e boil.Executor, singular bool, maybeArchive interface{}, mods queries.Applicator) error {
	var slice []*Archive
	var object *Archive

	if singular {
		object = maybeArchive.(*Archive)
	} else {
		slice = *maybeArchive.(*[]*Archive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"artist\".\"id\", \"artist\".\"slug\", \"artist\".\"name\", \"a\".\"archive_id\""),
		qm.From("\"artist\""),
		qm.InnerJoin("\"archive_artists\" as \"a\" on \"artist\".\"id\" = \"a\".\"artist_id\""),
		qm.WhereIn("\"a\".\"archive_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load artist")
	}

	var resultSlice []*Artist

	var localJoinCols []int64
	for results.Next() {
		one := new(Artist)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Slug, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for artist")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice artist")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on artist")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for artist")
	}

	if len(artistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Artists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &artistR{}
			}
			foreign.R.Archives = append(foreign.R.Archives, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Artists = append(local.R.Artists, foreign)
				if foreign.R == nil {
					foreign.R = &artistR{}
				}
				foreign.R.Archives = append(foreign.R.Archives, local)
				break
			}
		}
	}

	return nil
}

// LoadCircles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (archiveL) LoadCircles(e boil.Executor, singular bool, maybeArchive interface{}, mods queries.Applicator) error {
	var slice []*Archive
	var object *Archive

	if singular {
		object = maybeArchive.(*Archive)
	} else {
		slice = *maybeArchive.(*[]*Archive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"circle\".\"id\", \"circle\".\"slug\", \"circle\".\"name\", \"a\".\"archive_id\""),
		qm.From("\"circle\""),
		qm.InnerJoin("\"archive_circles\" as \"a\" on \"circle\".\"id\" = \"a\".\"circle_id\""),
		qm.WhereIn("\"a\".\"archive_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load circle")
	}

	var resultSlice []*Circle

	var localJoinCols []int64
	for results.Next() {
		one := new(Circle)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Slug, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for circle")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice circle")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on circle")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for circle")
	}

	if len(circleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Circles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &circleR{}
			}
			foreign.R.Archives = append(foreign.R.Archives, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Circles = append(local.R.Circles, foreign)
				if foreign.R == nil {
					foreign.R = &circleR{}
				}
				foreign.R.Archives = append(foreign.R.Archives, local)
				break
			}
		}
	}

	return nil
}

// LoadMagazines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (archiveL) LoadMagazines(e boil.Executor, singular bool, maybeArchive interface{}, mods queries.Applicator) error {
	var slice []*Archive
	var object *Archive

	if singular {
		object = maybeArchive.(*Archive)
	} else {
		slice = *maybeArchive.(*[]*Archive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"magazine\".\"id\", \"magazine\".\"slug\", \"magazine\".\"name\", \"a\".\"archive_id\""),
		qm.From("\"magazine\""),
		qm.InnerJoin("\"archive_magazines\" as \"a\" on \"magazine\".\"id\" = \"a\".\"magazine_id\""),
		qm.WhereIn("\"a\".\"archive_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load magazine")
	}

	var resultSlice []*Magazine

	var localJoinCols []int64
	for results.Next() {
		one := new(Magazine)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Slug, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for magazine")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice magazine")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on magazine")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for magazine")
	}

	if len(magazineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Magazines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &magazineR{}
			}
			foreign.R.Archives = append(foreign.R.Archives, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Magazines = append(local.R.Magazines, foreign)
				if foreign.R == nil {
					foreign.R = &magazineR{}
				}
				foreign.R.Archives = append(foreign.R.Archives, local)
				break
			}
		}
	}

	return nil
}

// LoadParodies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (archiveL) LoadParodies(e boil.Executor, singular bool, maybeArchive interface{}, mods queries.Applicator) error {
	var slice []*Archive
	var object *Archive

	if singular {
		object = maybeArchive.(*Archive)
	} else {
		slice = *maybeArchive.(*[]*Archive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"parody\".\"id\", \"parody\".\"slug\", \"parody\".\"name\", \"a\".\"archive_id\""),
		qm.From("\"parody\""),
		qm.InnerJoin("\"archive_parodies\" as \"a\" on \"parody\".\"id\" = \"a\".\"parody_id\""),
		qm.WhereIn("\"a\".\"archive_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load parody")
	}

	var resultSlice []*Parody

	var localJoinCols []int64
	for results.Next() {
		one := new(Parody)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Slug, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for parody")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice parody")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on parody")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for parody")
	}

	if len(parodyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Parodies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &parodyR{}
			}
			foreign.R.Archives = append(foreign.R.Archives, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Parodies = append(local.R.Parodies, foreign)
				if foreign.R == nil {
					foreign.R = &parodyR{}
				}
				foreign.R.Archives = append(foreign.R.Archives, local)
				break
			}
		}
	}

	return nil
}

// LoadTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (archiveL) LoadTags(e boil.Executor, singular bool, maybeArchive interface{}, mods queries.Applicator) error {
	var slice []*Archive
	var object *Archive

	if singular {
		object = maybeArchive.(*Archive)
	} else {
		slice = *maybeArchive.(*[]*Archive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"tag\".\"id\", \"tag\".\"slug\", \"tag\".\"name\", \"a\".\"archive_id\""),
		qm.From("\"tag\""),
		qm.InnerJoin("\"archive_tags\" as \"a\" on \"tag\".\"id\" = \"a\".\"tag_id\""),
		qm.WhereIn("\"a\".\"archive_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tag")
	}

	var resultSlice []*Tag

	var localJoinCols []int64
	for results.Next() {
		one := new(Tag)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Slug, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for tag")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tag")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tag")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagR{}
			}
			foreign.R.Archives = append(foreign.R.Archives, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Tags = append(local.R.Tags, foreign)
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.Archives = append(foreign.R.Archives, local)
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (archiveL) LoadUsers(e boil.Executor, singular bool, maybeArchive interface{}, mods queries.Applicator) error {
	var slice []*Archive
	var object *Archive

	if singular {
		object = maybeArchive.(*Archive)
	} else {
		slice = *maybeArchive.(*[]*Archive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".\"id\", \"users\".\"created_at\", \"users\".\"updated_at\", \"users\".\"email\", \"users\".\"password\", \"users\".\"name\", \"users\".\"is_banned\", \"users\".\"is_admin\", \"a\".\"archive_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"user_favorites\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"archive_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []int64
	for results.Next() {
		one := new(User)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.CreatedAt, &one.UpdatedAt, &one.Email, &one.Password, &one.Name, &one.IsBanned, &one.IsAdmin, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Archives = append(foreign.R.Archives, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Archives = append(foreign.R.Archives, local)
				break
			}
		}
	}

	return nil
}

// SetRedirectG of the archive to the related item.
// Sets o.R.Redirect to related.
// Adds o to related.R.RedirectArchives.
// Uses the global database handle.
func (o *Archive) SetRedirectG(insert bool, related *Archive) error {
	return o.SetRedirect(boil.GetDB(), insert, related)
}

// SetRedirect of the archive to the related item.
// Sets o.R.Redirect to related.
// Adds o to related.R.RedirectArchives.
func (o *Archive) SetRedirect(exec boil.Executor, insert bool, related *Archive) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"archive\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"redirect_id"}),
		strmangle.WhereClause("\"", "\"", 2, archivePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RedirectID, related.ID)
	if o.R == nil {
		o.R = &archiveR{
			Redirect: related,
		}
	} else {
		o.R.Redirect = related
	}

	if related.R == nil {
		related.R = &archiveR{
			RedirectArchives: ArchiveSlice{o},
		}
	} else {
		related.R.RedirectArchives = append(related.R.RedirectArchives, o)
	}

	return nil
}

// RemoveRedirectG relationship.
// Sets o.R.Redirect to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Archive) RemoveRedirectG(related *Archive) error {
	return o.RemoveRedirect(boil.GetDB(), related)
}

// RemoveRedirect relationship.
// Sets o.R.Redirect to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Archive) RemoveRedirect(exec boil.Executor, related *Archive) error {
	var err error

	queries.SetScanner(&o.RedirectID, nil)
	if err = o.Update(exec, boil.Whitelist("redirect_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Redirect = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RedirectArchives {
		if queries.Equal(o.RedirectID, ri.RedirectID) {
			continue
		}

		ln := len(related.R.RedirectArchives)
		if ln > 1 && i < ln-1 {
			related.R.RedirectArchives[i] = related.R.RedirectArchives[ln-1]
		}
		related.R.RedirectArchives = related.R.RedirectArchives[:ln-1]
		break
	}
	return nil
}

// SetSubmissionG of the archive to the related item.
// Sets o.R.Submission to related.
// Adds o to related.R.Archives.
// Uses the global database handle.
func (o *Archive) SetSubmissionG(insert bool, related *Submission) error {
	return o.SetSubmission(boil.GetDB(), insert, related)
}

// SetSubmission of the archive to the related item.
// Sets o.R.Submission to related.
// Adds o to related.R.Archives.
func (o *Archive) SetSubmission(exec boil.Executor, insert bool, related *Submission) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"archive\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"submission_id"}),
		strmangle.WhereClause("\"", "\"", 2, archivePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubmissionID, related.ID)
	if o.R == nil {
		o.R = &archiveR{
			Submission: related,
		}
	} else {
		o.R.Submission = related
	}

	if related.R == nil {
		related.R = &submissionR{
			Archives: ArchiveSlice{o},
		}
	} else {
		related.R.Archives = append(related.R.Archives, o)
	}

	return nil
}

// RemoveSubmissionG relationship.
// Sets o.R.Submission to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Archive) RemoveSubmissionG(related *Submission) error {
	return o.RemoveSubmission(boil.GetDB(), related)
}

// RemoveSubmission relationship.
// Sets o.R.Submission to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Archive) RemoveSubmission(exec boil.Executor, related *Submission) error {
	var err error

	queries.SetScanner(&o.SubmissionID, nil)
	if err = o.Update(exec, boil.Whitelist("submission_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Submission = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Archives {
		if queries.Equal(o.SubmissionID, ri.SubmissionID) {
			continue
		}

		ln := len(related.R.Archives)
		if ln > 1 && i < ln-1 {
			related.R.Archives[i] = related.R.Archives[ln-1]
		}
		related.R.Archives = related.R.Archives[:ln-1]
		break
	}
	return nil
}

// AddRedirectArchivesG adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.RedirectArchives.
// Sets related.R.Redirect appropriately.
// Uses the global database handle.
func (o *Archive) AddRedirectArchivesG(insert bool, related ...*Archive) error {
	return o.AddRedirectArchives(boil.GetDB(), insert, related...)
}

// AddRedirectArchives adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.RedirectArchives.
// Sets related.R.Redirect appropriately.
func (o *Archive) AddRedirectArchives(exec boil.Executor, insert bool, related ...*Archive) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RedirectID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"archive\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"redirect_id"}),
				strmangle.WhereClause("\"", "\"", 2, archivePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RedirectID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &archiveR{
			RedirectArchives: related,
		}
	} else {
		o.R.RedirectArchives = append(o.R.RedirectArchives, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &archiveR{
				Redirect: o,
			}
		} else {
			rel.R.Redirect = o
		}
	}
	return nil
}

// SetRedirectArchivesG removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Redirect's RedirectArchives accordingly.
// Replaces o.R.RedirectArchives with related.
// Sets related.R.Redirect's RedirectArchives accordingly.
// Uses the global database handle.
func (o *Archive) SetRedirectArchivesG(insert bool, related ...*Archive) error {
	return o.SetRedirectArchives(boil.GetDB(), insert, related...)
}

// SetRedirectArchives removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Redirect's RedirectArchives accordingly.
// Replaces o.R.RedirectArchives with related.
// Sets related.R.Redirect's RedirectArchives accordingly.
func (o *Archive) SetRedirectArchives(exec boil.Executor, insert bool, related ...*Archive) error {
	query := "update \"archive\" set \"redirect_id\" = null where \"redirect_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RedirectArchives {
			queries.SetScanner(&rel.RedirectID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Redirect = nil
		}
		o.R.RedirectArchives = nil
	}

	return o.AddRedirectArchives(exec, insert, related...)
}

// RemoveRedirectArchivesG relationships from objects passed in.
// Removes related items from R.RedirectArchives (uses pointer comparison, removal does not keep order)
// Sets related.R.Redirect.
// Uses the global database handle.
func (o *Archive) RemoveRedirectArchivesG(related ...*Archive) error {
	return o.RemoveRedirectArchives(boil.GetDB(), related...)
}

// RemoveRedirectArchives relationships from objects passed in.
// Removes related items from R.RedirectArchives (uses pointer comparison, removal does not keep order)
// Sets related.R.Redirect.
func (o *Archive) RemoveRedirectArchives(exec boil.Executor, related ...*Archive) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RedirectID, nil)
		if rel.R != nil {
			rel.R.Redirect = nil
		}
		if err = rel.Update(exec, boil.Whitelist("redirect_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RedirectArchives {
			if rel != ri {
				continue
			}

			ln := len(o.R.RedirectArchives)
			if ln > 1 && i < ln-1 {
				o.R.RedirectArchives[i] = o.R.RedirectArchives[ln-1]
			}
			o.R.RedirectArchives = o.R.RedirectArchives[:ln-1]
			break
		}
	}

	return nil
}

// AddArtistsG adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Artists.
// Sets related.R.Archives appropriately.
// Uses the global database handle.
func (o *Archive) AddArtistsG(insert bool, related ...*Artist) error {
	return o.AddArtists(boil.GetDB(), insert, related...)
}

// AddArtists adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Artists.
// Sets related.R.Archives appropriately.
func (o *Archive) AddArtists(exec boil.Executor, insert bool, related ...*Artist) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"archive_artists\" (\"archive_id\", \"artist_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &archiveR{
			Artists: related,
		}
	} else {
		o.R.Artists = append(o.R.Artists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &artistR{
				Archives: ArchiveSlice{o},
			}
		} else {
			rel.R.Archives = append(rel.R.Archives, o)
		}
	}
	return nil
}

// SetArtistsG removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Artists accordingly.
// Replaces o.R.Artists with related.
// Sets related.R.Archives's Artists accordingly.
// Uses the global database handle.
func (o *Archive) SetArtistsG(insert bool, related ...*Artist) error {
	return o.SetArtists(boil.GetDB(), insert, related...)
}

// SetArtists removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Artists accordingly.
// Replaces o.R.Artists with related.
// Sets related.R.Archives's Artists accordingly.
func (o *Archive) SetArtists(exec boil.Executor, insert bool, related ...*Artist) error {
	query := "delete from \"archive_artists\" where \"archive_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeArtistsFromArchivesSlice(o, related)
	if o.R != nil {
		o.R.Artists = nil
	}

	return o.AddArtists(exec, insert, related...)
}

// RemoveArtistsG relationships from objects passed in.
// Removes related items from R.Artists (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
// Uses the global database handle.
func (o *Archive) RemoveArtistsG(related ...*Artist) error {
	return o.RemoveArtists(boil.GetDB(), related...)
}

// RemoveArtists relationships from objects passed in.
// Removes related items from R.Artists (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
func (o *Archive) RemoveArtists(exec boil.Executor, related ...*Artist) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"archive_artists\" where \"archive_id\" = $1 and \"artist_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeArtistsFromArchivesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Artists {
			if rel != ri {
				continue
			}

			ln := len(o.R.Artists)
			if ln > 1 && i < ln-1 {
				o.R.Artists[i] = o.R.Artists[ln-1]
			}
			o.R.Artists = o.R.Artists[:ln-1]
			break
		}
	}

	return nil
}

func removeArtistsFromArchivesSlice(o *Archive, related []*Artist) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Archives {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Archives)
			if ln > 1 && i < ln-1 {
				rel.R.Archives[i] = rel.R.Archives[ln-1]
			}
			rel.R.Archives = rel.R.Archives[:ln-1]
			break
		}
	}
}

// AddCirclesG adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Circles.
// Sets related.R.Archives appropriately.
// Uses the global database handle.
func (o *Archive) AddCirclesG(insert bool, related ...*Circle) error {
	return o.AddCircles(boil.GetDB(), insert, related...)
}

// AddCircles adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Circles.
// Sets related.R.Archives appropriately.
func (o *Archive) AddCircles(exec boil.Executor, insert bool, related ...*Circle) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"archive_circles\" (\"archive_id\", \"circle_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &archiveR{
			Circles: related,
		}
	} else {
		o.R.Circles = append(o.R.Circles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &circleR{
				Archives: ArchiveSlice{o},
			}
		} else {
			rel.R.Archives = append(rel.R.Archives, o)
		}
	}
	return nil
}

// SetCirclesG removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Circles accordingly.
// Replaces o.R.Circles with related.
// Sets related.R.Archives's Circles accordingly.
// Uses the global database handle.
func (o *Archive) SetCirclesG(insert bool, related ...*Circle) error {
	return o.SetCircles(boil.GetDB(), insert, related...)
}

// SetCircles removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Circles accordingly.
// Replaces o.R.Circles with related.
// Sets related.R.Archives's Circles accordingly.
func (o *Archive) SetCircles(exec boil.Executor, insert bool, related ...*Circle) error {
	query := "delete from \"archive_circles\" where \"archive_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCirclesFromArchivesSlice(o, related)
	if o.R != nil {
		o.R.Circles = nil
	}

	return o.AddCircles(exec, insert, related...)
}

// RemoveCirclesG relationships from objects passed in.
// Removes related items from R.Circles (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
// Uses the global database handle.
func (o *Archive) RemoveCirclesG(related ...*Circle) error {
	return o.RemoveCircles(boil.GetDB(), related...)
}

// RemoveCircles relationships from objects passed in.
// Removes related items from R.Circles (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
func (o *Archive) RemoveCircles(exec boil.Executor, related ...*Circle) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"archive_circles\" where \"archive_id\" = $1 and \"circle_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCirclesFromArchivesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Circles {
			if rel != ri {
				continue
			}

			ln := len(o.R.Circles)
			if ln > 1 && i < ln-1 {
				o.R.Circles[i] = o.R.Circles[ln-1]
			}
			o.R.Circles = o.R.Circles[:ln-1]
			break
		}
	}

	return nil
}

func removeCirclesFromArchivesSlice(o *Archive, related []*Circle) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Archives {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Archives)
			if ln > 1 && i < ln-1 {
				rel.R.Archives[i] = rel.R.Archives[ln-1]
			}
			rel.R.Archives = rel.R.Archives[:ln-1]
			break
		}
	}
}

// AddMagazinesG adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Magazines.
// Sets related.R.Archives appropriately.
// Uses the global database handle.
func (o *Archive) AddMagazinesG(insert bool, related ...*Magazine) error {
	return o.AddMagazines(boil.GetDB(), insert, related...)
}

// AddMagazines adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Magazines.
// Sets related.R.Archives appropriately.
func (o *Archive) AddMagazines(exec boil.Executor, insert bool, related ...*Magazine) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"archive_magazines\" (\"archive_id\", \"magazine_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &archiveR{
			Magazines: related,
		}
	} else {
		o.R.Magazines = append(o.R.Magazines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &magazineR{
				Archives: ArchiveSlice{o},
			}
		} else {
			rel.R.Archives = append(rel.R.Archives, o)
		}
	}
	return nil
}

// SetMagazinesG removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Magazines accordingly.
// Replaces o.R.Magazines with related.
// Sets related.R.Archives's Magazines accordingly.
// Uses the global database handle.
func (o *Archive) SetMagazinesG(insert bool, related ...*Magazine) error {
	return o.SetMagazines(boil.GetDB(), insert, related...)
}

// SetMagazines removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Magazines accordingly.
// Replaces o.R.Magazines with related.
// Sets related.R.Archives's Magazines accordingly.
func (o *Archive) SetMagazines(exec boil.Executor, insert bool, related ...*Magazine) error {
	query := "delete from \"archive_magazines\" where \"archive_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeMagazinesFromArchivesSlice(o, related)
	if o.R != nil {
		o.R.Magazines = nil
	}

	return o.AddMagazines(exec, insert, related...)
}

// RemoveMagazinesG relationships from objects passed in.
// Removes related items from R.Magazines (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
// Uses the global database handle.
func (o *Archive) RemoveMagazinesG(related ...*Magazine) error {
	return o.RemoveMagazines(boil.GetDB(), related...)
}

// RemoveMagazines relationships from objects passed in.
// Removes related items from R.Magazines (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
func (o *Archive) RemoveMagazines(exec boil.Executor, related ...*Magazine) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"archive_magazines\" where \"archive_id\" = $1 and \"magazine_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeMagazinesFromArchivesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Magazines {
			if rel != ri {
				continue
			}

			ln := len(o.R.Magazines)
			if ln > 1 && i < ln-1 {
				o.R.Magazines[i] = o.R.Magazines[ln-1]
			}
			o.R.Magazines = o.R.Magazines[:ln-1]
			break
		}
	}

	return nil
}

func removeMagazinesFromArchivesSlice(o *Archive, related []*Magazine) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Archives {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Archives)
			if ln > 1 && i < ln-1 {
				rel.R.Archives[i] = rel.R.Archives[ln-1]
			}
			rel.R.Archives = rel.R.Archives[:ln-1]
			break
		}
	}
}

// AddParodiesG adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Parodies.
// Sets related.R.Archives appropriately.
// Uses the global database handle.
func (o *Archive) AddParodiesG(insert bool, related ...*Parody) error {
	return o.AddParodies(boil.GetDB(), insert, related...)
}

// AddParodies adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Parodies.
// Sets related.R.Archives appropriately.
func (o *Archive) AddParodies(exec boil.Executor, insert bool, related ...*Parody) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"archive_parodies\" (\"archive_id\", \"parody_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &archiveR{
			Parodies: related,
		}
	} else {
		o.R.Parodies = append(o.R.Parodies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &parodyR{
				Archives: ArchiveSlice{o},
			}
		} else {
			rel.R.Archives = append(rel.R.Archives, o)
		}
	}
	return nil
}

// SetParodiesG removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Parodies accordingly.
// Replaces o.R.Parodies with related.
// Sets related.R.Archives's Parodies accordingly.
// Uses the global database handle.
func (o *Archive) SetParodiesG(insert bool, related ...*Parody) error {
	return o.SetParodies(boil.GetDB(), insert, related...)
}

// SetParodies removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Parodies accordingly.
// Replaces o.R.Parodies with related.
// Sets related.R.Archives's Parodies accordingly.
func (o *Archive) SetParodies(exec boil.Executor, insert bool, related ...*Parody) error {
	query := "delete from \"archive_parodies\" where \"archive_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeParodiesFromArchivesSlice(o, related)
	if o.R != nil {
		o.R.Parodies = nil
	}

	return o.AddParodies(exec, insert, related...)
}

// RemoveParodiesG relationships from objects passed in.
// Removes related items from R.Parodies (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
// Uses the global database handle.
func (o *Archive) RemoveParodiesG(related ...*Parody) error {
	return o.RemoveParodies(boil.GetDB(), related...)
}

// RemoveParodies relationships from objects passed in.
// Removes related items from R.Parodies (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
func (o *Archive) RemoveParodies(exec boil.Executor, related ...*Parody) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"archive_parodies\" where \"archive_id\" = $1 and \"parody_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeParodiesFromArchivesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Parodies {
			if rel != ri {
				continue
			}

			ln := len(o.R.Parodies)
			if ln > 1 && i < ln-1 {
				o.R.Parodies[i] = o.R.Parodies[ln-1]
			}
			o.R.Parodies = o.R.Parodies[:ln-1]
			break
		}
	}

	return nil
}

func removeParodiesFromArchivesSlice(o *Archive, related []*Parody) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Archives {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Archives)
			if ln > 1 && i < ln-1 {
				rel.R.Archives[i] = rel.R.Archives[ln-1]
			}
			rel.R.Archives = rel.R.Archives[:ln-1]
			break
		}
	}
}

// AddTagsG adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Archives appropriately.
// Uses the global database handle.
func (o *Archive) AddTagsG(insert bool, related ...*Tag) error {
	return o.AddTags(boil.GetDB(), insert, related...)
}

// AddTags adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Archives appropriately.
func (o *Archive) AddTags(exec boil.Executor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"archive_tags\" (\"archive_id\", \"tag_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &archiveR{
			Tags: related,
		}
	} else {
		o.R.Tags = append(o.R.Tags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				Archives: ArchiveSlice{o},
			}
		} else {
			rel.R.Archives = append(rel.R.Archives, o)
		}
	}
	return nil
}

// SetTagsG removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Archives's Tags accordingly.
// Uses the global database handle.
func (o *Archive) SetTagsG(insert bool, related ...*Tag) error {
	return o.SetTags(boil.GetDB(), insert, related...)
}

// SetTags removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Archives's Tags accordingly.
func (o *Archive) SetTags(exec boil.Executor, insert bool, related ...*Tag) error {
	query := "delete from \"archive_tags\" where \"archive_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTagsFromArchivesSlice(o, related)
	if o.R != nil {
		o.R.Tags = nil
	}

	return o.AddTags(exec, insert, related...)
}

// RemoveTagsG relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
// Uses the global database handle.
func (o *Archive) RemoveTagsG(related ...*Tag) error {
	return o.RemoveTags(boil.GetDB(), related...)
}

// RemoveTags relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
func (o *Archive) RemoveTags(exec boil.Executor, related ...*Tag) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"archive_tags\" where \"archive_id\" = $1 and \"tag_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTagsFromArchivesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tags {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tags)
			if ln > 1 && i < ln-1 {
				o.R.Tags[i] = o.R.Tags[ln-1]
			}
			o.R.Tags = o.R.Tags[:ln-1]
			break
		}
	}

	return nil
}

func removeTagsFromArchivesSlice(o *Archive, related []*Tag) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Archives {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Archives)
			if ln > 1 && i < ln-1 {
				rel.R.Archives[i] = rel.R.Archives[ln-1]
			}
			rel.R.Archives = rel.R.Archives[:ln-1]
			break
		}
	}
}

// AddUsersG adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Archives appropriately.
// Uses the global database handle.
func (o *Archive) AddUsersG(insert bool, related ...*User) error {
	return o.AddUsers(boil.GetDB(), insert, related...)
}

// AddUsers adds the given related objects to the existing relationships
// of the archive, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Archives appropriately.
func (o *Archive) AddUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"user_favorites\" (\"archive_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &archiveR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Archives: ArchiveSlice{o},
			}
		} else {
			rel.R.Archives = append(rel.R.Archives, o)
		}
	}
	return nil
}

// SetUsersG removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Archives's Users accordingly.
// Uses the global database handle.
func (o *Archive) SetUsersG(insert bool, related ...*User) error {
	return o.SetUsers(boil.GetDB(), insert, related...)
}

// SetUsers removes all previously related items of the
// archive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Archives's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Archives's Users accordingly.
func (o *Archive) SetUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "delete from \"user_favorites\" where \"archive_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromArchivesSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}

	return o.AddUsers(exec, insert, related...)
}

// RemoveUsersG relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
// Uses the global database handle.
func (o *Archive) RemoveUsersG(related ...*User) error {
	return o.RemoveUsers(boil.GetDB(), related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Archives.
func (o *Archive) RemoveUsers(exec boil.Executor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"user_favorites\" where \"archive_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromArchivesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromArchivesSlice(o *Archive, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Archives {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Archives)
			if ln > 1 && i < ln-1 {
				rel.R.Archives[i] = rel.R.Archives[ln-1]
			}
			rel.R.Archives = rel.R.Archives[:ln-1]
			break
		}
	}
}

// Archives retrieves all the records using an executor.
func Archives(mods ...qm.QueryMod) archiveQuery {
	mods = append(mods, qm.From("\"archive\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"archive\".*"})
	}

	return archiveQuery{q}
}

// FindArchiveG retrieves a single record by ID.
func FindArchiveG(iD int64, selectCols ...string) (*Archive, error) {
	return FindArchive(boil.GetDB(), iD, selectCols...)
}

// FindArchive retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArchive(exec boil.Executor, iD int64, selectCols ...string) (*Archive, error) {
	archiveObj := &Archive{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"archive\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, archiveObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from archive")
	}

	if err = archiveObj.doAfterSelectHooks(exec); err != nil {
		return archiveObj, err
	}

	return archiveObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Archive) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Archive) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no archive provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(archiveColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	archiveInsertCacheMut.RLock()
	cache, cached := archiveInsertCache[key]
	archiveInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			archiveAllColumns,
			archiveColumnsWithDefault,
			archiveColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(archiveType, archiveMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(archiveType, archiveMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"archive\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"archive\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into archive")
	}

	if !cached {
		archiveInsertCacheMut.Lock()
		archiveInsertCache[key] = cache
		archiveInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Archive record using the global executor.
// See Update for more documentation.
func (o *Archive) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Archive.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Archive) Update(exec boil.Executor, columns boil.Columns) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	archiveUpdateCacheMut.RLock()
	cache, cached := archiveUpdateCache[key]
	archiveUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			archiveAllColumns,
			archivePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update archive, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"archive\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, archivePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(archiveType, archiveMapping, append(wl, archivePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update archive row")
	}

	if !cached {
		archiveUpdateCacheMut.Lock()
		archiveUpdateCache[key] = cache
		archiveUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q archiveQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q archiveQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for archive")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ArchiveSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArchiveSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), archivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"archive\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, archivePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in archive slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Archive) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Archive) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no archive provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(archiveColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	archiveUpsertCacheMut.RLock()
	cache, cached := archiveUpsertCache[key]
	archiveUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			archiveAllColumns,
			archiveColumnsWithDefault,
			archiveColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			archiveAllColumns,
			archivePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert archive, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(archivePrimaryKeyColumns))
			copy(conflict, archivePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"archive\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(archiveType, archiveMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(archiveType, archiveMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert archive")
	}

	if !cached {
		archiveUpsertCacheMut.Lock()
		archiveUpsertCache[key] = cache
		archiveUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Archive record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Archive) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Archive record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Archive) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Archive provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), archivePrimaryKeyMapping)
	sql := "DELETE FROM \"archive\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from archive")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

func (q archiveQuery) DeleteAllG() error {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q archiveQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("models: no archiveQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from archive")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o ArchiveSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArchiveSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	if len(archiveBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), archivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"archive\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, archivePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from archive slice")
	}

	if len(archiveAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Archive) ReloadG() error {
	if o == nil {
		return errors.New("models: no Archive provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Archive) Reload(exec boil.Executor) error {
	ret, err := FindArchive(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArchiveSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ArchiveSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArchiveSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArchiveSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), archivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"archive\".* FROM \"archive\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, archivePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ArchiveSlice")
	}

	*o = slice

	return nil
}

// ArchiveExistsG checks if the Archive row exists.
func ArchiveExistsG(iD int64) (bool, error) {
	return ArchiveExists(boil.GetDB(), iD)
}

// ArchiveExists checks if the Archive row exists.
func ArchiveExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"archive\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if archive exists")
	}

	return exists, nil
}
